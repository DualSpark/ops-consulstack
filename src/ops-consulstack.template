{
    "Outputs":{
        "templateValidationHash":{
            "Description":"Hash of this template that can be used as a simple means of validating whether a template has been changed since it was generated.",
            "Value":"bf5a4933d2ee7e423abf079a9ef60f5009fd1137deb78dcde5b2755f5970d998"
        },
        "dateGenerated":{
            "Description":"UTC datetime representation of when this template was generated",
            "Value":"2015-07-30 21:26:51.228609"
        },
        "elbAccessLoggingBucketAndPath":{
            "Description":"S3 bucket and key name prefix to use when configuring elb access logs to aggregate to S3",
            "Value":{
                "Fn::Join":[
                    "",
                    [
                        "arn:aws:s3:::",
                        {
                            "Ref":"dualsparkUtilityBucket"
                        },
                        ""
                    ]
                ]
            }
        },
        "cloudTrailLoggingBucketAndPath":{
            "Description":"S3 bucket and key name prefix to use when configuring CloudTrail to aggregate logs to S3",
            "Value":{
                "Fn::Join":[
                    "",
                    [
                        "arn:aws:s3:::",
                        {
                            "Ref":"dualsparkUtilityBucket"
                        },
                        ""
                    ]
                ]
            }
        }
    },
    "Resources":{
        "vpc":{
            "Type":"AWS::EC2::VPC",
            "Properties":{
                "EnableDnsSupport":"true",
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "vpcBase",
                        "cidr"
                    ]
                },
                "EnableDnsHostnames":"true",
                "Tags":[
                    {
                        "Value":"ConsulStackController",
                        "Key":"Name"
                    }
                ]
            }
        },
        "publicSubnet0EgressRoute":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "GatewayId":{
                    "Ref":"vpcIgw"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "RouteTableId":{
                    "Ref":"publicSubnet0RouteTable"
                }
            },
            "DependsOn":[
                "igwVpcAttachment"
            ]
        },
        "protectedSubnet0RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "protectedSubnet0EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"protectedSubnet0"
                },
                "RouteTableId":{
                    "Ref":"protectedSubnet0RouteTable"
                }
            }
        },
        "privateSubnet1EgressRoute":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "InstanceId":{
                    "Ref":"private1NATInstance"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "RouteTableId":{
                    "Ref":"privateSubnet1RouteTable"
                }
            }
        },
        "privateSubnet1EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"privateSubnet1"
                },
                "RouteTableId":{
                    "Ref":"privateSubnet1RouteTable"
                }
            }
        },
        "publicSubnet1EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"publicSubnet1"
                },
                "RouteTableId":{
                    "Ref":"publicSubnet1RouteTable"
                }
            }
        },
        "publicSubnet2EgressRoute":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "GatewayId":{
                    "Ref":"vpcIgw"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "RouteTableId":{
                    "Ref":"publicSubnet2RouteTable"
                }
            },
            "DependsOn":[
                "igwVpcAttachment"
            ]
        },
        "publicSubnet1EgressRoute":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "GatewayId":{
                    "Ref":"vpcIgw"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "RouteTableId":{
                    "Ref":"publicSubnet1RouteTable"
                }
            },
            "DependsOn":[
                "igwVpcAttachment"
            ]
        },
        "privateSubnet1RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "private2NATInstance":{
            "Type":"AWS::EC2::Instance",
            "Properties":{
                "SourceDestCheck":"false",
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az2Name"
                    ]
                },
                "Tags":[
                    {
                        "Value":"NAT",
                        "Key":"Name"
                    }
                ],
                "ImageId":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "natAmiId"
                    ]
                },
                "KeyName":{
                    "Ref":"ec2Key"
                },
                "InstanceType":{
                    "Ref":"natInstanceType"
                },
                "NetworkInterfaces":[
                    {
                        "SubnetId":{
                            "Ref":"privateSubnet2"
                        },
                        "DeviceIndex":"0",
                        "GroupSet":[
                            {
                                "Ref":"privateSubnet2SecurityGroup"
                            }
                        ],
                        "DeleteOnTermination":"true",
                        "AssociatePublicIpAddress":"true"
                    }
                ]
            }
        },
        "privateSubnet0":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az0Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet0",
                        "private"
                    ]
                }
            }
        },
        "privateSubnet1":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az1Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet1",
                        "private"
                    ]
                }
            }
        },
        "privateSubnet2":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az2Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet2",
                        "private"
                    ]
                }
            }
        },
        "dualsparkUtilityBucket":{
            "DeletionPolicy":"Retain",
            "Type":"AWS::S3::Bucket",
            "Properties":{
                "AccessControl":"BucketOwnerFullControl"
            }
        },
        "publicSubnet2RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "privateSubnet0SecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "SecurityGroupIngress":[
                    {
                        "ToPort":"-1",
                        "FromPort":"-1",
                        "IpProtocol":"-1",
                        "CidrIp":{
                            "Fn::FindInMap":[
                                "networkAddresses",
                                "subnet0",
                                "public"
                            ]
                        }
                    }
                ],
                "VpcId":{
                    "Ref":"vpc"
                },
                "GroupDescription":"Security Group for the private subnet for az 0",
                "SecurityGroupEgress":[
                    {
                        "ToPort":"-1",
                        "FromPort":"-1",
                        "IpProtocol":"-1",
                        "CidrIp":"0.0.0.0/0"
                    }
                ]
            }
        },
        "publicSubnet2EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"publicSubnet2"
                },
                "RouteTableId":{
                    "Ref":"publicSubnet2RouteTable"
                }
            }
        },
        "privateSubnet2SecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "SecurityGroupIngress":[
                    {
                        "ToPort":"-1",
                        "FromPort":"-1",
                        "IpProtocol":"-1",
                        "CidrIp":{
                            "Fn::FindInMap":[
                                "networkAddresses",
                                "subnet2",
                                "public"
                            ]
                        }
                    }
                ],
                "VpcId":{
                    "Ref":"vpc"
                },
                "GroupDescription":"Security Group for the private subnet for az 2",
                "SecurityGroupEgress":[
                    {
                        "ToPort":"-1",
                        "FromPort":"-1",
                        "IpProtocol":"-1",
                        "CidrIp":"0.0.0.0/0"
                    }
                ]
            }
        },
        "dualsparkUtilityBucketLoggingPolicy":{
            "Type":"AWS::S3::BucketPolicy",
            "Properties":{
                "PolicyDocument":{
                    "Statement":[
                        {
                            "Action":[
                                "s3:PutObject"
                            ],
                            "Resource":{
                                "Fn::Join":[
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref":"dualsparkUtilityBucket"
                                        },
                                        "/",
                                        "AWSLogs/",
                                        {
                                            "Ref":"AWS::AccountId"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Effect":"Allow",
                            "Principal":{
                                "AWS":[
                                    {
                                        "Fn::FindInMap":[
                                            "RegionMap",
                                            {
                                                "Ref":"AWS::Region"
                                            },
                                            "elbAccountId"
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "Action":[
                                "s3:GetBucketAcl"
                            ],
                            "Resource":{
                                "Fn::Join":[
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref":"dualsparkUtilityBucket"
                                        }
                                    ]
                                ]
                            },
                            "Effect":"Allow",
                            "Principal":{
                                "AWS":[
                                    "arn:aws:iam::903692715234:root",
                                    "arn:aws:iam::859597730677:root",
                                    "arn:aws:iam::814480443879:root",
                                    "arn:aws:iam::216624486486:root",
                                    "arn:aws:iam::086441151436:root",
                                    "arn:aws:iam::388731089494:root",
                                    "arn:aws:iam::284668455005:root",
                                    "arn:aws:iam::113285607260:root"
                                ]
                            }
                        },
                        {
                            "Action":[
                                "s3:PutObject"
                            ],
                            "Resource":{
                                "Fn::Join":[
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref":"dualsparkUtilityBucket"
                                        },
                                        "/",
                                        "AWSLogs/",
                                        {
                                            "Ref":"AWS::AccountId"
                                        },
                                        "/*"
                                    ]
                                ]
                            },
                            "Effect":"Allow",
                            "Condition":{
                                "StringEquals":{
                                    "s3:x-amz-acl":"bucket-owner-full-control"
                                }
                            },
                            "Principal":{
                                "AWS":[
                                    "arn:aws:iam::903692715234:root",
                                    "arn:aws:iam::859597730677:root",
                                    "arn:aws:iam::814480443879:root",
                                    "arn:aws:iam::216624486486:root",
                                    "arn:aws:iam::086441151436:root",
                                    "arn:aws:iam::388731089494:root",
                                    "arn:aws:iam::284668455005:root",
                                    "arn:aws:iam::113285607260:root"
                                ]
                            }
                        }
                    ]
                },
                "Bucket":{
                    "Ref":"dualsparkUtilityBucket"
                }
            }
        },
        "vpcIgw":{
            "Type":"AWS::EC2::InternetGateway"
        },
        "protectedSubnet2EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"protectedSubnet2"
                },
                "RouteTableId":{
                    "Ref":"protectedSubnet2RouteTable"
                }
            }
        },
        "privateSubnet1SecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "SecurityGroupIngress":[
                    {
                        "ToPort":"-1",
                        "FromPort":"-1",
                        "IpProtocol":"-1",
                        "CidrIp":{
                            "Fn::FindInMap":[
                                "networkAddresses",
                                "subnet1",
                                "public"
                            ]
                        }
                    }
                ],
                "VpcId":{
                    "Ref":"vpc"
                },
                "GroupDescription":"Security Group for the private subnet for az 1",
                "SecurityGroupEgress":[
                    {
                        "ToPort":"-1",
                        "FromPort":"-1",
                        "IpProtocol":"-1",
                        "CidrIp":"0.0.0.0/0"
                    }
                ]
            }
        },
        "privateSubnet2EgressRoute":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "InstanceId":{
                    "Ref":"private2NATInstance"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "RouteTableId":{
                    "Ref":"privateSubnet2RouteTable"
                }
            }
        },
        "publicSubnet0EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"publicSubnet0"
                },
                "RouteTableId":{
                    "Ref":"publicSubnet0RouteTable"
                }
            }
        },
        "publicSubnet1":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az1Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet1",
                        "public"
                    ]
                }
            }
        },
        "publicSubnet0":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az0Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet0",
                        "public"
                    ]
                }
            }
        },
        "publicSubnet2":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az2Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet2",
                        "public"
                    ]
                }
            }
        },
        "publicSubnet1RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "igwVpcAttachment":{
            "Type":"AWS::EC2::VPCGatewayAttachment",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "InternetGatewayId":{
                    "Ref":"vpcIgw"
                }
            }
        },
        "private1NATInstance":{
            "Type":"AWS::EC2::Instance",
            "Properties":{
                "SourceDestCheck":"false",
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az1Name"
                    ]
                },
                "Tags":[
                    {
                        "Value":"NAT",
                        "Key":"Name"
                    }
                ],
                "ImageId":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "natAmiId"
                    ]
                },
                "KeyName":{
                    "Ref":"ec2Key"
                },
                "InstanceType":{
                    "Ref":"natInstanceType"
                },
                "NetworkInterfaces":[
                    {
                        "SubnetId":{
                            "Ref":"privateSubnet1"
                        },
                        "DeviceIndex":"0",
                        "GroupSet":[
                            {
                                "Ref":"privateSubnet1SecurityGroup"
                            }
                        ],
                        "DeleteOnTermination":"true",
                        "AssociatePublicIpAddress":"true"
                    }
                ]
            }
        },
        "privateSubnet0EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"privateSubnet0"
                },
                "RouteTableId":{
                    "Ref":"privateSubnet0RouteTable"
                }
            }
        },
        "commonSecurityGroup":{
            "Type":"AWS::EC2::SecurityGroup",
            "Properties":{
                "SecurityGroupIngress":[
                    {
                        "ToPort":"22",
                        "FromPort":"22",
                        "IpProtocol":"tcp",
                        "CidrIp":{
                            "Fn::FindInMap":[
                                "networkAddresses",
                                "vpcBase",
                                "cidr"
                            ]
                        }
                    }
                ],
                "VpcId":{
                    "Ref":"vpc"
                },
                "GroupDescription":"Security Group allows ingress and egress for common usage patterns throughout this deployed infrastructure.",
                "SecurityGroupEgress":[
                    {
                        "ToPort":"80",
                        "FromPort":"80",
                        "IpProtocol":"tcp",
                        "CidrIp":"0.0.0.0/0"
                    },
                    {
                        "ToPort":"443",
                        "FromPort":"443",
                        "IpProtocol":"tcp",
                        "CidrIp":"0.0.0.0/0"
                    },
                    {
                        "ToPort":"123",
                        "FromPort":"123",
                        "IpProtocol":"udp",
                        "CidrIp":"0.0.0.0/0"
                    }
                ]
            }
        },
        "protectedSubnet1RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "protectedSubnet1EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"protectedSubnet1"
                },
                "RouteTableId":{
                    "Ref":"protectedSubnet1RouteTable"
                }
            }
        },
        "protectedSubnet2RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "privateSubnet0RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "privateSubnet0EgressRoute":{
            "Type":"AWS::EC2::Route",
            "Properties":{
                "InstanceId":{
                    "Ref":"private0NATInstance"
                },
                "DestinationCidrBlock":"0.0.0.0/0",
                "RouteTableId":{
                    "Ref":"privateSubnet0RouteTable"
                }
            }
        },
        "ConsulStackStack":{
            "Type":"AWS::CloudFormation::Stack",
            "Properties":{
                "TemplateURL":"https://dualspark.s3.amazonaws.com/devtools/cloudformation/ConsulStack.1438291610.template",
                "TimeoutInMinutes":"60",
                "Parameters":{
                    "publicSubnet2":{
                        "Ref":"publicSubnet2"
                    },
                    "ec2Key":{
                        "Ref":"ec2Key"
                    },
                    "publicSubnet1":{
                        "Ref":"publicSubnet1"
                    },
                    "publicSubnet0":{
                        "Ref":"publicSubnet0"
                    },
                    "protectedSubnet0":{
                        "Ref":"protectedSubnet0"
                    },
                    "privateSubnet0":{
                        "Ref":"privateSubnet0"
                    },
                    "privateSubnet1":{
                        "Ref":"privateSubnet1"
                    },
                    "privateSubnet2":{
                        "Ref":"privateSubnet2"
                    },
                    "vpcId":{
                        "Ref":"vpc"
                    },
                    "protectedSubnet2":{
                        "Ref":"protectedSubnet2"
                    },
                    "protectedSubnet1":{
                        "Ref":"protectedSubnet1"
                    },
                    "commonSecurityGroup":{
                        "Ref":"commonSecurityGroup"
                    },
                    "availabilityZone0":{
                        "Fn::GetAtt":[
                            "privateSubnet0",
                            "AvailabilityZone"
                        ]
                    },
                    "availabilityZone1":{
                        "Fn::GetAtt":[
                            "privateSubnet1",
                            "AvailabilityZone"
                        ]
                    },
                    "availabilityZone2":{
                        "Fn::GetAtt":[
                            "privateSubnet2",
                            "AvailabilityZone"
                        ]
                    },
                    "vpcCidr":{
                        "Fn::FindInMap":[
                            "networkAddresses",
                            "vpcBase",
                            "cidr"
                        ]
                    },
                    "utilityBucket":{
                        "Ref":"dualsparkUtilityBucket"
                    }
                }
            },
            "DependsOn":[]
        },
        "publicSubnet0RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        },
        "bastionStack":{
            "Type":"AWS::CloudFormation::Stack",
            "Properties":{
                "TemplateURL":"https://dualspark.s3.amazonaws.com/devtools/cloudformation/bastion.1438291609.template",
                "TimeoutInMinutes":"60",
                "Parameters":{
                    "publicSubnet2":{
                        "Ref":"publicSubnet2"
                    },
                    "ec2Key":{
                        "Ref":"ec2Key"
                    },
                    "publicSubnet1":{
                        "Ref":"publicSubnet1"
                    },
                    "publicSubnet0":{
                        "Ref":"publicSubnet0"
                    },
                    "protectedSubnet0":{
                        "Ref":"protectedSubnet0"
                    },
                    "privateSubnet0":{
                        "Ref":"privateSubnet0"
                    },
                    "privateSubnet1":{
                        "Ref":"privateSubnet1"
                    },
                    "privateSubnet2":{
                        "Ref":"privateSubnet2"
                    },
                    "vpcId":{
                        "Ref":"vpc"
                    },
                    "protectedSubnet2":{
                        "Ref":"protectedSubnet2"
                    },
                    "protectedSubnet1":{
                        "Ref":"protectedSubnet1"
                    },
                    "commonSecurityGroup":{
                        "Ref":"commonSecurityGroup"
                    },
                    "availabilityZone0":{
                        "Fn::GetAtt":[
                            "privateSubnet0",
                            "AvailabilityZone"
                        ]
                    },
                    "availabilityZone1":{
                        "Fn::GetAtt":[
                            "privateSubnet1",
                            "AvailabilityZone"
                        ]
                    },
                    "availabilityZone2":{
                        "Fn::GetAtt":[
                            "privateSubnet2",
                            "AvailabilityZone"
                        ]
                    },
                    "vpcCidr":{
                        "Fn::FindInMap":[
                            "networkAddresses",
                            "vpcBase",
                            "cidr"
                        ]
                    },
                    "utilityBucket":{
                        "Ref":"dualsparkUtilityBucket"
                    }
                }
            },
            "DependsOn":[]
        },
        "privateSubnet2EgressRouteTableAssociation":{
            "Type":"AWS::EC2::SubnetRouteTableAssociation",
            "Properties":{
                "SubnetId":{
                    "Ref":"privateSubnet2"
                },
                "RouteTableId":{
                    "Ref":"privateSubnet2RouteTable"
                }
            }
        },
        "protectedSubnet2":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az2Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet2",
                        "protected"
                    ]
                }
            }
        },
        "protectedSubnet1":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az1Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet1",
                        "protected"
                    ]
                }
            }
        },
        "protectedSubnet0":{
            "Type":"AWS::EC2::Subnet",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                },
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az0Name"
                    ]
                },
                "CidrBlock":{
                    "Fn::FindInMap":[
                        "networkAddresses",
                        "subnet0",
                        "protected"
                    ]
                }
            }
        },
        "private0NATInstance":{
            "Type":"AWS::EC2::Instance",
            "Properties":{
                "SourceDestCheck":"false",
                "AvailabilityZone":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "az0Name"
                    ]
                },
                "Tags":[
                    {
                        "Value":"NAT",
                        "Key":"Name"
                    }
                ],
                "ImageId":{
                    "Fn::FindInMap":[
                        "RegionMap",
                        {
                            "Ref":"AWS::Region"
                        },
                        "natAmiId"
                    ]
                },
                "KeyName":{
                    "Ref":"ec2Key"
                },
                "InstanceType":{
                    "Ref":"natInstanceType"
                },
                "NetworkInterfaces":[
                    {
                        "SubnetId":{
                            "Ref":"privateSubnet0"
                        },
                        "DeviceIndex":"0",
                        "GroupSet":[
                            {
                                "Ref":"privateSubnet0SecurityGroup"
                            }
                        ],
                        "DeleteOnTermination":"true",
                        "AssociatePublicIpAddress":"true"
                    }
                ]
            }
        },
        "privateSubnet2RouteTable":{
            "Type":"AWS::EC2::RouteTable",
            "Properties":{
                "VpcId":{
                    "Ref":"vpc"
                }
            }
        }
    },
    "Description":"Environment Generator Base deployment.",
    "Parameters":{
        "remoteAccessLocation":{
            "Type":"String",
            "Description":"CIDR block identifying the network address space that will be allowed to ingress into public access points within this solution",
            "Default":"0.0.0.0/0",
            "MinLength":9,
            "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "MaxLength":18,
            "ConstraintDescription":"must be a valid IP CIDR range of the form x.x.x.x/x."
        },
        "natInstanceType":{
            "Default":"t2.micro",
            "Type":"String",
            "ConstraintDescription":"must be a valid EC2 instance type.",
            "Description":"Instance type to use when launching NAT instances.",
            "AllowedValues":[
                "t2.micro",
                "t2.small",
                "t2.medium",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "c4.large",
                "c4.xlarge",
                "c4.2xlarge",
                "c4.4xlarge",
                "c4.8xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "d2.xlarge",
                "d2.2xlarge",
                "d2.4xlarge",
                "d2.8xlarge",
                "g2.2xlarge"
            ]
        },
        "ec2Key":{
            "Type":"String",
            "Description":"Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Default":"dualspark_rsa",
            "MinLength":1,
            "AllowedPattern":"[\\x20-\\x7E]*",
            "MaxLength":255,
            "ConstraintDescription":"can only contain ASCII characters."
        }
    },
    "Mappings":{
        "networkAddresses":{
            "subnet2":{
                "protected":"10.0.144.0/20",
                "public":"10.0.184.0/21",
                "private":"10.0.64.0/19"
            },
            "vpcBase":{
                "cidr":"10.0.0.0/16"
            },
            "subnet0":{
                "protected":"10.0.112.0/20",
                "public":"10.0.168.0/21",
                "private":"10.0.0.0/19"
            },
            "subnet1":{
                "protected":"10.0.128.0/20",
                "public":"10.0.176.0/21",
                "private":"10.0.32.0/19"
            }
        },
        "RegionMap":{
            "us-east-1":{
                "amazonLinuxAmiId":"ami-1ecae776",
                "az1Name":"us-east-1c",
                "az0Name":"us-east-1a",
                "natAmiId":"ami-4f9fee26",
                "centOS65AmiId":"ami-8997afe0",
                "elbAccountId":"127311923021",
                "az2Name":"us-east-1d",
                "ubuntu1404LtsAmiId":"ami-018c9568",
                "az3Name":"us-east-1e"
            },
            "ap-northeast-1":{
                "natAmiId":"ami-5f840e5e",
                "elbAccountId":"582318560864",
                "centOS65AmiId":"ami-81294380",
                "ubuntu1404LtsAmiId":"ami-bddaa2bc",
                "amazonLinuxAmiId":"ami-cbf90ecb"
            },
            "eu-west-1":{
                "amazonLinuxAmiId":"ami-a10897d6",
                "az1Name":"eu-west-1b",
                "az0Name":"eu-west-1a",
                "natAmiId":"ami-ed352799",
                "centOS65AmiId":"ami-42718735",
                "elbAccountId":"156460612806",
                "az2Name":"eu-west-1c",
                "ubuntu1404LtsAmiId":"ami-896c96fe"
            },
            "us-west-1c":{
                "natAmiId":"ami-7850793d",
                "centOS65AmiId":"ami-1a013c5f",
                "ubuntu1404LtsAmiId":"ami-ee4f77ab",
                "amazonLinuxAmiId":"ami-d114f295"
            },
            "ap-southeast-1":{
                "natAmiId":"ami-780a432a",
                "elbAccountId":"114774131450",
                "centOS65AmiId":"ami-a08fd9f2",
                "ubuntu1404LtsAmiId":"ami-9a7724c8",
                "amazonLinuxAmiId":"ami-68d8e93a"
            },
            "ap-southeast-2":{
                "natAmiId":"ami-0154c73b",
                "elbAccountId":"783225319266",
                "centOS65AmiId":"ami-e7138ddd",
                "ubuntu1404LtsAmiId":"ami-43128a79",
                "amazonLinuxAmiId":"ami-fd9cecc7"
            },
            "us-west-2":{
                "amazonLinuxAmiId":"ami-e7527ed7",
                "az1Name":"us-west-2b",
                "az0Name":"us-west-2a",
                "natAmiId":"ami-69ae8259",
                "centOS65AmiId":"ami-b6bdde86",
                "elbAccountId":"797873946194",
                "az2Name":"us-west-2c",
                "ubuntu1404LtsAmiId":"ami-6ac2a85a"
            },
            "us-gov-west-1":{
                "elbAccountId":"048591011584"
            },
            "us-west-1":{
                "natAmiId":"ami-7850793d",
                "elbAccountId":"027434742980",
                "centOS65AmiId":"ami-1a013c5f",
                "ubuntu1404LtsAmiId":"ami-ee4f77ab",
                "amazonLinuxAmiId":"ami-d114f295"
            },
            "eu-central-1":{
                "amazonLinuxAmiId":"ami-a8221fb5"
            },
            "sa-east-1":{
                "amazonLinuxAmiId":"ami-b52890a8",
                "az1Name":"sa-east-1b",
                "az0Name":"sa-east-1a",
                "natAmiId":"ami-7660c56b",
                "centOS65AmiId":"ami-7d02a260",
                "elbAccountId":"507241528517",
                "az2Name":"sa-east-1c",
                "ubuntu1404LtsAmiId":"ami-7315b76e"
            },
            "us-west-1b":{
                "natAmiId":"ami-7850793d",
                "centOS65AmiId":"ami-1a013c5f",
                "ubuntu1404LtsAmiId":"ami-ee4f77ab",
                "amazonLinuxAmiId":"ami-d114f295"
            },
            "us-west-1a":{
                "natAmiId":"ami-7850793d",
                "centOS65AmiId":"ami-1a013c5f",
                "ubuntu1404LtsAmiId":"ami-ee4f77ab",
                "amazonLinuxAmiId":"ami-d114f295"
            }
        }
    }
}